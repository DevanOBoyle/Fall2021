//Filename: nqueens.cpp
//
//This file is the main executable for a variation of the N queens problem where the remaining queens
//are found given a size of a chess board along with given locations of queens
//
//Usage: (the executable is generated by a Makefile)
//     ./nqueens <INPUT FILE> <OUTPUT FILE>
//
//Devan O'Boyle, Oct 2021

#include <iostream>
#include <stack>
#include <stdexcept>
#include <fstream>
#include <array>
#include <vector>
#include <algorithm>
#include <sstream>
#include <cstring>
using namespace std;

class Coord {
    public:
        int x;
        int y;
        bool immovable;
};

class Vars {
    public:
        int row;
        int col;
        vector<int> cols;
        bool valid;
};

//check for board with pre-established queens
bool is_valid(int n, int row, int col, vector<int> placements) {
    for (int i = 0; i < n; i++) {
        if (placements[i] >= 0) {
            if (placements[i] == col || abs(col - placements[i]) == abs(row - i)) {
                return false;
            }
        }
    }
    return true;
}

//check for board with no pre-established queens
bool is_valid_s(int row, int col, vector<int> placements) {
    for (int i = 0; i < row; i++) {
        if (placements[i] == col || placements[i] == col - (row - i) || placements[i] == col + (row - i)) {
            return false;
        }
    }
    return true;
}

//finds the remaining queens given pre-established queens
bool find_remaining(int n, unsigned immovables, stack<class Coord> coords, vector<int> stored, vector<int> *result) {
    int row = 0;
    int col = 0;
    vector<bool> unchanged(n, false);
    for (int i = 0; i < n; i++) {
        if (stored[i] >= 0) {
            unchanged[i] = true;
            int temp = stored[i];
            stored[i] = -1;
            if (is_valid(n, i, temp, stored) == false) {
                return false;
            }
            stored[i] = temp;
        }
    }
    while (col < n || row != 0) {
        if (unchanged[row] == true) {
            if (row < n) {
                row += 1;
                col = 0;
            }

            if (row == n) {
                for (int i = 0; i < n; i++) {
                    result->push_back(stored[i]);
                }
                return true;
            }
        }
        if (unchanged[row] == false && is_valid(n, row, col, stored) && row < n && col < n) {
            stored[row] = col;
            Coord to_push;
            to_push.x = col;
            to_push.y = row;
            to_push.immovable = false;
            coords.push(to_push);
            col = 0;
            row += 1;
            if (row == n) {
                for (int i = 0; i < row; i++) {
                    result->push_back(stored[i]);
                }
                return true;
            }
        }
        else {
            if (coords.size() <= immovables && col >= n) {
                return false;
            }
            if ((col >= n && coords.size() != immovables) || row >= n) {
                while ((col >= n && coords.size() != immovables) || row >= n) {
                    col = coords.top().x + 1;
                    row = coords.top().y;
                    coords.pop();
                    stored[row] = -1;
                }
            }
            else {
                col += 1;
            }
        }
    }
    return false;
}

//finds n queens given an nxn sized board
bool solve_s(int n, vector<int> *result) {
    stack <int> cols;
    vector<int> stored(n, 0);
    int row = 0;
    int col = 0;
    while (col < n || row != 0) {
        if (is_valid_s(row, col, stored) && row < n) {
             stored[row] = col;
             cols.push(col);
             col = 0;
             row += 1;
             if (row == n) {
                 for (int i = 0; i < row; i++) {
                     result->push_back(stored[i]);
                 }
                 return true;
             }
        }
        else {
            col += 1;
            while ((col >= n && !cols.empty()) || row >= n) {
                col = cols.top() + 1;
                cols.pop();
                row -= 1;
            }
        }
    }
    return false;
}

int main(int argc, char** argv) {
    if (argc < 3) {
        throw std::invalid_argument("Usage: ./nqueens <INPUT FILE> <OUTPUT FILE>");
    }

    ifstream input;
    ofstream output;

    input.open(argv[1]);
    output.open(argv[2]);

    string command;
    char *com, *dummy, *string_val;
    int val_x, val_y;

    while (getline(input, command)) {
        int matrix_size;
        com = strdup(command.c_str());
        string_val = strtok(com, " \t");
        if (string_val != NULL) {
            matrix_size = strtol(string_val, &dummy, 10);
        }
        stack <class Coord> recurStack;
        vector<int> v(matrix_size, -1);
        vector<int> *out = new vector<int>();

        unsigned incoords = 0;
        bool more_input = true;
        bool sol_false = false;
        while (more_input) {
            Coord to_push;
            string_val = strtok(NULL, " \t");
            if (string_val == NULL) {
                more_input = false;
                break;
            }
            val_x = strtol(string_val, &dummy, 10);
            val_x -= 1;
            to_push.x = val_x;
            string_val = strtok(NULL, " \t");
            if (string_val == NULL) {
                more_input = false;
                break;
            }
            val_y = strtol(string_val, &dummy, 10);
            val_y -= 1;
            to_push.y = val_y;
            to_push.immovable = true;

            recurStack.push(to_push);

            if (v[val_y] >= 0) {
                sol_false = true;
                more_input = false;
                break;
            }
            for (int i = 0; i < matrix_size; i++) {
                if (v[i] == val_x) {
                    sol_false = true;
                    more_input = false;
                    break;
                }
            }
            v[val_y] = val_x;
            incoords += 1;
        }
        if (sol_false == true) {
            cout << "No solution" << endl;
            output << "No solution" << endl;
        }
        else {
            bool s;

            if (incoords == 0) {
                s = solve_s(matrix_size, out);
            }
            else {
                s = find_remaining(matrix_size, incoords, recurStack, v, out);
            }
            vector<int> r = *out;
            if (s == true) {
                vector<int> sort;
                for (int i = 0; i < matrix_size; i++) {
                    for (int j = 0; j < matrix_size; j++) {
                        if (r[j] == i) {
                            sort.push_back(j);
                        }
                    }
                }
                for (unsigned i = 0; i < sort.size(); i++) {
                    cout << i+1 << " " << sort[i]+1 << " ";
                    output << i+1 << " " << sort[i]+1 << " ";
                }
                cout << endl;
                output << endl;
            }
            else {
                cout << "No solution" << endl;
                output << "No solution" << endl;
            }
        }
    }
    input.close();
    output.close();
}
